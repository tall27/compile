name: Build oqs-provider v0.7

on:
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux-amd64
            artifact_ext: so
          - os: macos-latest
            platform: macos-amd64
            artifact_ext: dylib
          - os: macos-14
            platform: macos-arm64
            artifact_ext: dylib
          - os: windows-latest
            platform: windows-amd64
            artifact_ext: dll

    steps:
      - name: Checkout this repository
        uses: actions/checkout@v4

      # Clean up build/output dirs — Linux/macOS
      - name: Remove oqs-provider directories (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          rm -rf oqs-provider oqs-provider-0.7.0 openssl liboqs

      # Clean up build/output dirs — Windows
      - name: Remove oqs-provider directories (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Remove-Item -Recurse -Force oqs-provider,oqs-provider-0.7.0,openssl,liboqs -ErrorAction SilentlyContinue

      - name: Cache build directories
        uses: actions/cache@v4
        with:
          path: |
            liboqs/build
            liboqs/install
            oqs-provider/build
            openssl/build
          key: ${{ runner.os }}-cache-${{ hashFiles('**/oqs-provider-0.7.0.zip') }}

      - name: Download oqs-provider 0.7.0 source zip (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          curl -L -o oqs-provider-0.7.0.zip https://github.com/open-quantum-safe/oqs-provider/archive/refs/tags/0.7.0.zip
          unzip -q oqs-provider-0.7.0.zip
          mv oqs-provider-0.7.0 oqs-provider

      - name: Download oqs-provider 0.7.0 source zip (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://github.com/open-quantum-safe/oqs-provider/archive/refs/tags/0.7.0.zip" -OutFile "oqs-provider-0.7.0.zip"
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          [System.IO.Compression.ZipFile]::ExtractToDirectory("oqs-provider-0.7.0.zip", ".")
          Move-Item "oqs-provider-0.7.0" "oqs-provider"

      - name: Verify oqs-provider source (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          if [ ! -f "oqs-provider/CMakeLists.txt" ]; then
            echo "CMakeLists.txt not found! Extraction failed."
            exit 1
          fi

      - name: Verify oqs-provider source (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          if (!(Test-Path "oqs-provider/CMakeLists.txt")) {
            Write-Host "CMakeLists.txt not found! Extraction failed."
            exit 1
          }

      # Install dependencies
      - name: Set up dependencies (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential perl git

      - name: Set up dependencies (macOS)
        if: startsWith(matrix.platform, 'macos')
        shell: bash
        run: |
          brew update
          brew install cmake perl git

      - name: Set up dependencies (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y
          choco install strawberryperl git -y

      # Build OpenSSL 3.5 from source
      - name: Clone and build OpenSSL 3.5 (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          git clone --branch openssl-3.5.0 --depth 1 https://github.com/openssl/openssl.git
          cd openssl
          ./Configure --prefix=$GITHUB_WORKSPACE/openssl/build --openssldir=$GITHUB_WORKSPACE/openssl/build no-shared
          make -j$(nproc || sysctl -n hw.logicalcpu)
          make install_sw

      - name: Clone and build OpenSSL 3.5 (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          git clone --branch openssl-3.5.0 --depth 1 https://github.com/openssl/openssl.git
          cd openssl
          perl Configure VC-WIN64A no-shared --prefix="$env:GITHUB_WORKSPACE\openssl\build" --openssldir="$env:GITHUB_WORKSPACE\openssl\build"
          # The next line is only needed if you want to ensure the correct environment is set for nmake
          # & "$env:VSINSTALLDIR\Common7\Tools\VsDevCmd.bat"
          nmake
          nmake install_sw

      # Build liboqs
      - name: Build and install liboqs (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          git clone --branch main --depth 1 https://github.com/open-quantum-safe/liboqs.git
          cd liboqs
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/liboqs/install
          make -j$(nproc || sysctl -n hw.logicalcpu)
          make install

      - name: Build and install liboqs (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          git clone --branch main --depth 1 https://github.com/open-quantum-safe/liboqs.git
          cd liboqs
          mkdir build
          cd build
          cmake .. -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX="$env:GITHUB_WORKSPACE\liboqs\install"
          cmake --build . --config Release
          cmake --install . --config Release

      # Build oqs-provider
      - name: Configure and build oqs-provider (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          cd oqs-provider
          mkdir -p build && cd build
          cmake .. \
            -DCMAKE_PREFIX_PATH="$GITHUB_WORKSPACE/liboqs/install;$GITHUB_WORKSPACE/openssl/build" \
            -DOPENSSL_ROOT_DIR="$GITHUB_WORKSPACE/openssl/build"
          make -j$(nproc || sysctl -n hw.logicalcpu)

      - name: Configure and build oqs-provider (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cd oqs-provider
          mkdir build
          cd build
          cmake .. -G "Visual Studio 17 2022" -A x64 `
            -DCMAKE_PREFIX_PATH="$env:GITHUB_WORKSPACE\liboqs\install;$env:GITHUB_WORKSPACE\openssl\build" `
            -DOPENSSL_ROOT_DIR="$env:GITHUB_WORKSPACE\openssl\build"
          cmake --build . --config Release

      # Prepare artifact
      - name: Find oqsprovider shared library and openssl executable (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          mkdir -p _oqs_artifact
          cp $(find oqs-provider/build -type f -name 'oqsprovider.*' | head -n1) _oqs_artifact/
          cp $(find openssl/build -type f -perm +111 -name 'openssl' | head -n1) _oqs_artifact/

      - name: Find oqsprovider shared library and openssl executable (Windows)
        if: runner.os == 'Windows'
       
