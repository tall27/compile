name: Build oqs-provider v0.7

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux-amd64
            artifact_ext: so
          - os: macos-latest
            platform: macos-amd64
            artifact_ext: dylib
          - os: macos-14
            platform: macos-arm64
            artifact_ext: dylib
          - os: windows-latest
            platform: windows-amd64
            artifact_ext: dll

    steps:
      - name: Checkout this repository
        uses: actions/checkout@v4

      - name: Cache liboqs and oqs-provider build
        uses: actions/cache@v4
        with:
          path: |
            liboqs/build
            liboqs/install
            oqs-provider/build
          key: ${{ runner.os }}-liboqs-${{ hashFiles('**/oqs-provider-0.7.0.zip') }}

      - name: Download oqs-provider 0.7.0 source zip
        run: |
          curl -L -o oqs-provider-0.7.0.zip https://github.com/open-quantum-safe/oqs-provider/archive/refs/tags/0.7.0.zip
          unzip -q oqs-provider-0.7.0.zip
          mv oqs-provider-0.7.0 oqs-provider

      - name: Set up dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential libssl-dev git

      - name: Set up dependencies (macOS)
        if: startsWith(matrix.platform, 'macos')
        run: |
          brew update
          brew install cmake openssl git

      - name: Set up dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y
          choco install git -y
          choco install openssl --version=3.3.0 -y

      - name: Build and install liboqs (Linux)
        if: runner.os == 'Linux'
        run: |
          git clone --branch main --depth 1 https://github.com/open-quantum-safe/liboqs.git
          cd liboqs
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/liboqs/install
          make -j$(nproc)
          make install
          cd ../..

      - name: Build and install liboqs (macOS)
        if: startsWith(matrix.platform, 'macos')
        run: |
          git clone --branch main --depth 1 https://github.com/open-quantum-safe/liboqs.git
          cd liboqs
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/liboqs/install
          make -j$(sysctl -n hw.logicalcpu)
          make install
          cd ../..

      - name: Build and install liboqs (Windows)
        if: runner.os == 'Windows'
        run: |
          git clone --branch main --depth 1 https://github.com/open-quantum-safe/liboqs.git
          cd liboqs
          mkdir build
          cd build
          cmake .. -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/liboqs/install
          cmake --build . --config Release
          cmake --install . --config Release
          cd ../..

      - name: Configure and build oqs-provider (Linux)
        if: runner.os == 'Linux'
        run: |
          cd oqs-provider
          mkdir -p build && cd build
          cmake .. -DCMAKE_PREFIX_PATH="$GITHUB_WORKSPACE/liboqs/install"
          make -j$(nproc)
        env:
          PKG_CONFIG_PATH: ${{ github.workspace }}/liboqs/install/lib/pkgconfig

      - name: Configure and build oqs-provider (macOS)
        if: startsWith(matrix.platform, 'macos')
        run: |
          cd oqs-provider
          mkdir -p build && cd build
          cmake .. -DCMAKE_PREFIX_PATH="$GITHUB_WORKSPACE/liboqs/install"
          make -j$(sysctl -n hw.logicalcpu)

      - name: Configure and build oqs-provider (Windows)
        if: runner.os == 'Windows'
        run: |
          cd oqs-provider
          mkdir build
          cd build
          cmake .. -G "Visual Studio 17 2022" -A x64 -DCMAKE_PREFIX_PATH="${{ github.workspace }}/liboqs/install" -DOPENSSL_ROOT_DIR="C:/Program Files/OpenSSL"
          cmake --build . --config Release

      - name: Find oqsprovider shared library
        id: find-lib
        shell: bash
        run: |
          # Linux
          if [[ "${{ matrix.platform }}" == "linux-amd64" ]]; then
            cp $(find oqs-provider/build -name 'oqsprovider.so' | head -n1) oqs-provider/build/oqs-provider-linux-amd64
            echo "libpath=oqs-provider/build/oqs-provider-linux-amd64" >> $GITHUB_OUTPUT
          fi
          # macOS (amd64 or arm64)
          if [[ "${{ matrix.platform }}" == "macos-amd64" || "${{ matrix.platform }}" == "macos-arm64" ]]; then
            cp $(find oqs-provider/build -name 'oqsprovider.dylib' | head -n1) oqs-provider/build/oqs-provider-${{ matrix.platform }}
            echo "libpath=oqs-provider/build/oqs-provider-${{ matrix.platform }}" >> $GITHUB_OUTPUT
          fi
          # Windows
          if [[ "${{ matrix.platform }}" == "windows-amd64" ]]; then
            cp $(find oqs-provider/build -name 'oqsprovider.dll' | head -n1) oqs-provider/build/oqs-provider-windows-amd64.dll
            echo "libpath=oqs-provider/build/oqs-provider-windows-amd64.dll" >> $GITHUB_OUTPUT
          fi

      - name: Upload oqsprovider library only
        uses: actions/upload-artifact@v4
        with:
          name: oqs-provider-${{ matrix.platform }}
          path: ${{ steps.find-lib.outputs.libpath }}
