name: OpenSSL macOS Build

on:
  workflow_dispatch:
  push:

permissions:
  contents: read

jobs:
  build-macos:
    runs-on: macos-14
    env:
      OPENSSL_VERSION: 3.5.0
    strategy:
      matrix:
        arch: [x64, arm64]
    steps:
      - uses: actions/checkout@v4
      - name: Set up install directory variable
        shell: bash
        run: |
          set -euo pipefail
          echo "INSTALL_DIR=$GITHUB_WORKSPACE/openssl-install" >> $GITHUB_ENV
      - name: Clean up install directory
        shell: bash
        run: |
          set -euo pipefail
          rm -rf "$INSTALL_DIR"
      - name: Download and Setup OpenSSL Source
        shell: bash
        run: |
          set -euo pipefail
          echo Downloading OpenSSL $OPENSSL_VERSION...
          curl -L -o openssl.zip https://github.com/openssl/openssl/archive/refs/tags/openssl-$OPENSSL_VERSION.zip
          echo Extracting archive...
          unzip -q openssl.zip
          mv openssl-openssl-$OPENSSL_VERSION openssl
          echo Verifying directory exists...
          ls -la openssl
      - name: Install Dependencies
        shell: bash
        run: |
          set -euo pipefail
          brew install perl
      - name: Configure
        shell: bash
        run: |
          set -euo pipefail
          cd openssl
          if [ "${{ matrix.arch }}" = "x64" ]; then
            ./Configure darwin64-x86_64-cc no-shared no-module --prefix=$INSTALL_DIR --openssldir=$INSTALL_DIR/ssl
          else
            ./Configure darwin64-arm64-cc no-shared no-module --prefix=$INSTALL_DIR --openssldir=$INSTALL_DIR/ssl
          fi
      - name: Build
        shell: bash
        run: |
          set -euo pipefail
          cd openssl
          make
      - name: Install
        shell: bash
        run: |
          set -euo pipefail
          cd openssl
          make install
      - name: Create portable executable
        shell: bash
        run: |
          set -euo pipefail
          echo Creating portable OpenSSL executable...
          rm -rf ./openssl
          if [ ! -x "$INSTALL_DIR/bin/openssl" ]; then
            echo "ERROR: $INSTALL_DIR/bin/openssl does not exist or is not executable!" >&2
            ls -l $INSTALL_DIR/bin || true
            exit 1
          fi
          ls -l $INSTALL_DIR/bin
          cp $INSTALL_DIR/bin/openssl ./openssl
          chmod +x ./openssl
          if [ ! -f ./openssl ]; then
            echo "ERROR: ./openssl was not created!" >&2
            ls -l .
            exit 1
          fi
          echo Testing portable executable...
          ./openssl version
          mkdir -p portable-package
          cp ./openssl portable-package/
          if [ ! -f portable-package/openssl ]; then
            echo "ERROR: portable-package/openssl was not created!" >&2
            ls -l portable-package
            exit 1
          fi
          echo "OpenSSL $OPENSSL_VERSION Portable - ${{ matrix.arch }}" > portable-package/README.txt
          echo "=======================================" >> portable-package/README.txt
          echo "" >> portable-package/README.txt
          echo "This is a standalone portable version of OpenSSL $OPENSSL_VERSION" >> portable-package/README.txt
          echo "No installation required - just run the executable." >> portable-package/README.txt
          echo "" >> portable-package/README.txt
          echo "Usage: ./openssl [command] [options]" >> portable-package/README.txt
          echo "" >> portable-package/README.txt
          echo "Examples:" >> portable-package/README.txt
          echo "  ./openssl version" >> portable-package/README.txt
          echo "  ./openssl list -digest-algorithms" >> portable-package/README.txt
          echo "  ./openssl genrsa -out private.key 2048" >> portable-package/README.txt
          echo "  ./openssl req -new -x509 -key private.key -out cert.pem -days 365" >> portable-package/README.txt
          echo "" >> portable-package/README.txt
          echo "Platform: macOS ${{ matrix.arch }}" >> portable-package/README.txt
          echo "Version: OpenSSL $OPENSSL_VERSION" >> portable-package/README.txt
      - name: Package binaries
        shell: bash
        run: |
          set -euo pipefail
          cd $INSTALL_DIR
          tar -czf openssl-$OPENSSL_VERSION-${{ matrix.arch }}-macos-full.tar.gz *
          mv openssl-$OPENSSL_VERSION-${{ matrix.arch }}-macos-full.tar.gz $GITHUB_WORKSPACE/
      - name: Create portable package
        shell: bash
        run: |
          set -euo pipefail
          cd portable-package
          tar -czf openssl-$OPENSSL_VERSION-${{ matrix.arch }}-portable.tar.gz *
          mv openssl-$OPENSSL_VERSION-${{ matrix.arch }}-portable.tar.gz $GITHUB_WORKSPACE/
      - name: List workspace files
        shell: bash
        run: |
          set -euo pipefail
          echo "Listing workspace files after packaging:"
          ls -l $GITHUB_WORKSPACE
      - name: Print build summary
        shell: bash
        run: |
          set -euo pipefail
          echo "Build completed for OpenSSL $OPENSSL_VERSION on macOS ${{ matrix.arch }}."
          echo "Artifacts:"
          ls -lh $GITHUB_WORKSPACE/openssl-$OPENSSL_VERSION-${{ matrix.arch }}-macos-full.tar.gz || true
          ls -lh $GITHUB_WORKSPACE/openssl-$OPENSSL_VERSION-${{ matrix.arch }}-portable.tar.gz || true
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: openssl-${{ env.OPENSSL_VERSION }}-${{ matrix.arch }}-packages
          path: openssl-${{ env.OPENSSL_VERSION }}-${{ matrix.arch }}-*.tar.gz
          retention-days: 90