name: OpenSSL 3.5.0 Multi-Platform Build

on:
    workflow_dispatch:
    push:
    #   branches: [ main ]

permissions:
  contents: read

jobs:
  build:
    strategy:
      matrix:
        include:
          # Windows builds
          - os: windows-2022
            arch: win64
            config: no-shared no-module --prefix=C:\OpenSSL --openssldir=C:\OpenSSL\ssl
            shell: cmd
            configure_cmd: perl Configure VC-WIN64A
            build_cmd: nmake
            install_cmd: nmake install
            binary_name: openssl.exe
            package_dir: C:\OpenSSL
            package_suffix: windows-full
          - os: windows-2022
            arch: win32
            config: no-shared no-module --prefix=C:\OpenSSL --openssldir=C:\OpenSSL\ssl
            shell: cmd
            configure_cmd: perl Configure VC-WIN32
            build_cmd: nmake
            install_cmd: nmake install
            binary_name: openssl.exe
            package_dir: C:\OpenSSL
            package_suffix: windows-full
          # macOS builds
          - os: macos-14
            arch: x64
            config: no-shared no-module --prefix=/usr/local/openssl --openssldir=/usr/local/openssl/ssl
            shell: bash
            configure_cmd: ./Configure darwin64-x86_64-cc
            build_cmd: make
            install_cmd: make install
            binary_name: openssl
            package_dir: /usr/local/openssl
            package_suffix: macos-full
          - os: macos-14
            arch: arm64
            config: no-shared no-module --prefix=/usr/local/openssl --openssldir=/usr/local/openssl/ssl
            shell: bash
            configure_cmd: ./Configure darwin64-arm64-cc
            build_cmd: make
            install_cmd: make install
            binary_name: openssl
            package_dir: /usr/local/openssl
            package_suffix: macos-full
          # Linux builds
          - os: ubuntu-22.04
            arch: x64
            config: no-shared no-module --prefix=/usr/local/openssl --openssldir=/usr/local/openssl/ssl
            shell: bash
            configure_cmd: ./Configure linux-x86_64
            build_cmd: make
            install_cmd: make install
            binary_name: openssl
            package_dir: /usr/local/openssl
            package_suffix: linux-full
          - os: ubuntu-22.04
            arch: arm64
            config: no-shared no-module no-asm --prefix=/usr/local/openssl --openssldir=/usr/local/openssl/ssl
            shell: bash
            configure_cmd: ./Configure linux-aarch64
            build_cmd: make
            install_cmd: make install
            binary_name: openssl
            package_dir: /usr/local/openssl
            package_suffix: linux-full
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Download and Setup OpenSSL Source (Windows)
      if: matrix.os == 'windows-2022'
      shell: cmd
      run: |
        echo Downloading OpenSSL 3.5.0...
        curl -L -o openssl.zip https://github.com/openssl/openssl/archive/refs/tags/openssl-3.5.0.zip
        echo Extracting archive...
        tar -xf openssl.zip
        echo Renaming directory...
        ren openssl-openssl-3.5.0 openssl
        echo Verifying directory exists...
        dir openssl
        
    - name: Download and Setup OpenSSL Source (Unix)
      if: matrix.os != 'windows-2022'
      shell: bash
      run: |
        echo Downloading OpenSSL 3.5.0...
        curl -L -o openssl.zip https://github.com/openssl/openssl/archive/refs/tags/openssl-3.5.0.zip
        echo Extracting archive...
        unzip -q openssl.zip
        mv openssl-openssl-3.5.0 openssl
        echo Verifying directory exists...
        ls -la openssl
    
    # Windows-specific setup
    - name: Setup Windows Build Environment
      if: matrix.os == 'windows-2022'
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ matrix.arch }}
        
    - name: Setup NASM for Windows
      if: matrix.os == 'windows-2022'
      uses: ilammy/setup-nasm@v1
      with:
        platform: ${{ matrix.arch }}
        
    - name: Setup Perl for Windows
      if: matrix.os == 'windows-2022'
      shell: cmd
      run: choco install strawberryperl -y
    
    # Unix-specific setup
    - name: Install Dependencies (macOS)
      if: matrix.os == 'macos-14'
      shell: bash
      run: |
        brew install perl
        
    - name: Install Dependencies (Linux)
      if: matrix.os == 'ubuntu-22.04'
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential perl
        
    - name: Configure (Windows)
      if: matrix.os == 'windows-2022'
      shell: cmd
      run: |
        cd openssl
        ${{ matrix.configure_cmd }} ${{ matrix.config }}
        
    - name: Configure (Unix)
      if: matrix.os != 'windows-2022'
      shell: bash
      run: |
        cd openssl
        ${{ matrix.configure_cmd }} ${{ matrix.config }}
        
    - name: Build (Windows)
      if: matrix.os == 'windows-2022'
      shell: cmd
      run: |
        cd openssl
        ${{ matrix.build_cmd }}
        
    - name: Build (Unix)
      if: matrix.os != 'windows-2022'
      shell: bash
      run: |
        cd openssl
        ${{ matrix.build_cmd }}
        
    - name: Install (Windows)
      if: matrix.os == 'windows-2022'
      shell: cmd
      run: |
        cd openssl
        ${{ matrix.install_cmd }}
        
    - name: Install (Unix)
      if: matrix.os != 'windows-2022'
      shell: bash
      run: |
        cd openssl
        ${{ matrix.install_cmd }}
        
    # Create portable executable
    - name: Create portable executable (Windows)
      if: matrix.os == 'windows-2022'
      shell: cmd
      run: |
        echo Creating portable OpenSSL executable...
        copy ${{ matrix.package_dir }}\bin\${{ matrix.binary_name }} ${{ matrix.binary_name }}
        
        echo Testing portable executable...
        ${{ matrix.binary_name }} version
        
        mkdir portable-package
        copy ${{ matrix.binary_name }} portable-package\
        
        echo OpenSSL 3.5.0 Portable - ${{ matrix.arch }} > portable-package\README.txt
        echo ======================================= >> portable-package\README.txt
        echo. >> portable-package\README.txt
        echo This is a standalone portable version of OpenSSL 3.5.0 >> portable-package\README.txt
        echo No installation required - just run the executable. >> portable-package\README.txt
        echo. >> portable-package\README.txt
        echo Usage: ${{ matrix.binary_name }} [command] [options] >> portable-package\README.txt
        echo. >> portable-package\README.txt
        echo Examples: >> portable-package\README.txt
        echo   ${{ matrix.binary_name }} version >> portable-package\README.txt
        echo   ${{ matrix.binary_name }} list -digest-algorithms >> portable-package\README.txt
        echo   ${{ matrix.binary_name }} genrsa -out private.key 2048 >> portable-package\README.txt
        echo   ${{ matrix.binary_name }} req -new -x509 -key private.key -out cert.pem -days 365 >> portable-package\README.txt
        echo. >> portable-package\README.txt
        echo Platform: Windows ${{ matrix.arch }} >> portable-package\README.txt
        echo Version: OpenSSL 3.5.0 >> portable-package\README.txt
    
    - name: Create portable executable (Unix)
      if: matrix.os != 'windows-2022'
      shell: bash
      run: |
        echo Creating portable OpenSSL executable...
        cp ${{ matrix.package_dir }}/bin/${{ matrix.binary_name }} ./${{ matrix.binary_name }}
        
        echo Testing portable executable...
        ./${{ matrix.binary_name }} version
        
        mkdir -p portable-package
        cp ./${{ matrix.binary_name }} portable-package/
        
        echo "OpenSSL 3.5.0 Portable - ${{ matrix.arch }}" > portable-package/README.txt
        echo "=======================================" >> portable-package/README.txt
        echo "" >> portable-package/README.txt
        echo "This is a standalone portable version of OpenSSL 3.5.0" >> portable-package/README.txt
        echo "No installation required - just run the executable." >> portable-package/README.txt
        echo "" >> portable-package/README.txt
        echo "Usage: ./${{ matrix.binary_name }} [command] [options]" >> portable-package/README.txt
        echo "" >> portable-package/README.txt
        echo "Examples:" >> portable-package/README.txt
        echo "  ./${{ matrix.binary_name }} version" >> portable-package/README.txt
        echo "  ./${{ matrix.binary_name }} list -digest-algorithms" >> portable-package/README.txt
        echo "  ./${{ matrix.binary_name }} genrsa -out private.key 2048" >> portable-package/README.txt
        echo "  ./${{ matrix.binary_name }} req -new -x509 -key private.key -out cert.pem -days 365" >> portable-package/README.txt
        echo "" >> portable-package/README.txt
        echo "Platform: ${{ matrix.os }} ${{ matrix.arch }}" >> portable-package/README.txt
        echo "Version: OpenSSL 3.5.0" >> portable-package/README.txt
        
    # Package binaries
    - name: Package binaries (Windows)
      if: matrix.os == 'windows-2022'
      shell: powershell
      run: |
        cd ${{ matrix.package_dir }}
        Compress-Archive -Path * -DestinationPath openssl-3.5.0-${{ matrix.arch }}-${{ matrix.package_suffix }}.zip
        Move-Item openssl-3.5.0-${{ matrix.arch }}-${{ matrix.package_suffix }}.zip $env:GITHUB_WORKSPACE\
        
    - name: Package binaries (Unix)
      if: matrix.os != 'windows-2022'
      shell: bash
      run: |
        cd ${{ matrix.package_dir }}
        tar -czf openssl-3.5.0-${{ matrix.arch }}-${{ matrix.package_suffix }}.tar.gz *
        mv openssl-3.5.0-${{ matrix.arch }}-${{ matrix.package_suffix }}.tar.gz $GITHUB_WORKSPACE/
        
    # Create portable package
    - name: Create portable package (Windows)
      if: matrix.os == 'windows-2022'
      shell: powershell
      run: |
        cd portable-package
        Compress-Archive -Path * -DestinationPath openssl-3.5.0-${{ matrix.arch }}-portable.zip
        Move-Item openssl-3.5.0-${{ matrix.arch }}-portable.zip $env:GITHUB_WORKSPACE\
        
    - name: Create portable package (Unix)
      if: matrix.os != 'windows-2022'
      shell: bash
      run: |
        cd portable-package
        tar -czf openssl-3.5.0-${{ matrix.arch }}-portable.tar.gz *
        mv openssl-3.5.0-${{ matrix.arch }}-portable.tar.gz $GITHUB_WORKSPACE/
        
    # Upload artifacts
    - name: Upload artifacts (Windows)
      if: matrix.os == 'windows-2022'
      uses: actions/upload-artifact@v4
      with:
        name: openssl-3.5.0-${{ matrix.arch }}-packages
        path: |
          openssl-3.5.0-${{ matrix.arch }}-${{ matrix.package_suffix }}.zip
          openssl-3.5.0-${{ matrix.arch }}-portable.zip
        retention-days: 90
        
    - name: Upload artifacts (Unix)
      if: matrix.os != 'windows-2022'
      uses: actions/upload-artifact@v4
      with:
        name: openssl-3.5.0-${{ matrix.arch }}-packages
        path: |
          openssl-3.5.0-${{ matrix.arch }}-${{ matrix.package_suffix }}.tar.gz
          openssl-3.5.0-${{ matrix.arch }}-portable.tar.gz
        retention-days: 90 